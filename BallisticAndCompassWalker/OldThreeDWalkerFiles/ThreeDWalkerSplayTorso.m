classdef ThreeDWalkerSplayTorso < ThreeDWalkerSplay
  % ThreeDWalkerSplayTorso
  
  % cop is found by setting finding the spot where "the forces cancel the
  % torques"
  
  properties
    MTorso = 0.2; %0.34; %
    ITorso = 0.01; %0.025; %
    torsoHeight = 0.2;
    KTorsoRoll = 0; %0.02;
    BTorsoRoll = 0; %0.02;
    
    torsoRollTorque = 0;
    forceBetweenLegs = 0;
  end
  
  methods (Static)
    
    function [] = test()
      format compact;
      %       ThreeDWalkerSplayTorso.testEnergy();
      %       ThreeDWalkerSplayTorso.testSwitchingLegs();
      ThreeDWalkerSplayTorso.testFindLimitCycle();
      %       ThreeDWalkerSplayTorso.renderTestVideo();
    end
    
    function [] = renderTestVideo()
      %%
      set(0, 'DefaultFigureRenderer', 'OpenGL'); %'zbuffer'); %'zbuffer'); %
      opengl software;
      
      aviWriter = VideoWriter('test.avi');
      aviWriter.FrameRate = 30;
      open(aviWriter);
      
      walker = ThreeDWalkerSplay();
      limitCycleHipRollWalker = ThreeDWalkerSplayState([0.000000000000000  -0.000000000000000   1.000000000000000   0.092782839469035  -0.332422165389413 ...
        -0.050771981351022   0.363939245170571  -0.137939942205706   0.441917526331963  -0.085969598806670 ...
        0.095554796329744  -0.757883683880587   0.480711208135867   0.801777232517588   0.249007236095320 ...
        0.843764731844449]');
      walker.groundAngle = 0.096686630828179;
      walker.KSwing = 0.165721074223436;
      
      stepsToPlot = 1;
      walker.walkNSteps(limitCycleHipRollWalker.getVector(), stepsToPlot, ...
        'interleaveAnimation', 1, 'aviWriter', aviWriter, 'shouldAntiAlias', 1);
      
      close(aviWriter);
      
    end
    
    function [] = testFindLimitCycle()
      %% 
      format long
      
      walker = ThreeDWalkerSplayTorso();
      
      limitCycleSplayInitial = ThreeDWalkerSplayTorsoState([0.000000000000000  -0.000000000000000   1.000000000000000   0.092782839469035  -0.332422165389413 ...
        -0.050771981351022   0.363939245170571  0 ...
        -0.137939942205706   0.441917526331963  -0.085969598806670 ...
        0.095554796329744  -0.757883683880587   0.480711208135867   0.801777232517588   0.249007236095320 ...
        0.843764731844449 0]');
      walker.groundAngle = 0.096686630828179;
      walker.KSwing = 0.165721074223436;
      

      limitCycleSplayInitial.torso.roll = 0.2;
      limitCycleSplayInitial.torso.rollDot = -0.0;

      
      limitCycleSplayInitial = ThreeDWalkerSplayTorsoState(walker.modeTransition(0, limitCycleSplayInitial.getVector(), 'stanceFootRolling'));
      
      limitCycleSplayInitial.torso
      limitCycleSplayInitial.pelvis
      limitCycleSplayInitial.stanceLeg
      limitCycleSplayInitial.swingLeg
      
      
      limitCycleSplayInitial.pelvis.roll = 0;
      limitCycleSplayInitial.pelvis.rollDot = -0.6;
      
      limitCycleSplayInitial.stanceLeg.roll = 0;
      
      limitCycleSplayInitial.swingLeg.roll = -0.1;
      limitCycleSplayInitial.swingLeg.rollDot = 0.5;
      
      
      % after finding limit cycle:
      %       limitCycleSplayInitial = ThreeDWalkerSplayTorsoState([-0.000000000000000  -0.000000000000000   1.000000000000000   0.192889855820959  -0.319778773220563  -0.113805853674610   0.389404375914300  -0.271245715093369  -0.179592185733507   0.458380832087009  -0.149213501947876 ...
      %         0.052664859559352  -1.464852169473239   0.546209395497800   1.543078559580523   0.163619579672197   1.592761148835523   1.220308385327722]');
      %       walker.groundAngle = 0.095191754303090;
      %       walker.KSwing = 0.142733467588286;
      
      
      limitCycleSplayInitial = ThreeDWalkerSplayTorsoState([0.000000000000000   0.000000000000000   1.000000000000000   0.120356044428635  -0.328777877993236  -0.067786184174453   0.370245043866664  -0.175891161712126  -0.108099742563932   0.445948264948026  -0.104909226878422 ...
        0.083914906811382  -0.951091390267835   0.494802722875279   1.004917104880350   0.232721204989729   1.052797376298956   0.738321863675509]');
      walker.groundAngle = 0.096969457913419;
      walker.KSwing = 0.161949688973179;
      
      
      
      [finalState, finalTime, allStates, allTimes, thisWalker] = walker.oneStep(limitCycleSplayInitial, 'interleaveAnimation', 1);
      finalState = finalState.getVector();
      
      [limitCycleSplayInitial.getVector() finalState]
      
      errorVector = finalState - limitCycleSplayInitial.getVector()
      
      
      figure
      walker.plot(limitCycleSplayInitial)
      walker.plot(finalState)
      
      
      %%
      
      %       figure;
      %       plot(allTimes, allStates(1:3, :)');
      %       hold on;
      %       plot(finalTime, finalState(1:3), 'ok');
      %
      %
      %       plot(allTimes, allStates(9:11, :)');
      %       hold on;
      %       plot(finalTime, finalState(9:11), 'ok');
      
      %%
      parametersToAlter = {'groundAngle', 'KSwing'}; %, 'KTorsoRoll'}; %, 'KSwingRoll'};
      desiredSpeed = 0.4;
      desiredStepLength = 0.68;
      
      fprintf('finding limit cycle with speed = %g L / time, step length = %g\n', desiredSpeed, desiredStepLength);
      [limitCycleHipRollWalker, finalParameters, limitCycleError] = walker.findLimitCycle(limitCycleSplayInitial.getVector(), ...
        'parametersToAlter', parametersToAlter, ...); %
        'desiredSpeed', desiredSpeed, 'desiredStepLength', desiredStepLength);
      walker = walker.setParametersFromList(parametersToAlter, finalParameters);
      
      limitCycleHipRollWalker'
      finalParameters'
      
      walker.printStepCharacteristics(limitCycleHipRollWalker);
            
      %%
      if (0)
        %       walker.pelvisWidth = -walker.pelvisWidth;
        [nextState, finalTime, allStates, allTimes, nextWalker] = walker.oneStep(limitCycleHipRollWalker, 'interleaveAnimation', 1);
        %       nextState = nextState.switchLegs();
        %       nextWalker = walker;
        [limitCycleHipRollWalker.getVector()'; nextState.getVector()']
        
        %
        [nextState2, finalTime, allStates, allTimes, nextWalker2] = walker.oneStep(nextState, 'interleaveAnimation', 1);
        [nextState.getVector()'; nextState2.getVector()']
      end
      
      %%
      thisState = ThreeDWalkerSplayTorsoState(limitCycleHipRollWalker);
      thisWalker = walker;
      %       thisWalker.pelvisWidth = -thisWalker.pelvisWidth;
      box off;
      
      stepsToPlot = 10;
      walker.walkNSteps(ThreeDWalkerSplayTorsoState(limitCycleHipRollWalker).getVector(), stepsToPlot, ...
        'interleaveAnimation', 1);
      
      %%
      
      %       for i = 1 : 10
      %         thisState.getVector()'
      %         thisWalker.pelvisWidth;
      %         oppositeStanceLeg = mod(i, 2) == 0;
      %         initialPelvisY = 0; %thisState.pelvis.y;
      %         [thisState, finalTime, allStates, allTimes, walkerNext] = thisWalker.oneStep(thisState, ...
      %           'interleaveAnimation', 1, ...
      %           'initialPelvisY', initialPelvisY, ...
      %           'plotLegsSwitched', oppositeStanceLeg);
      %         thisState.pelvis.y = -thisState.pelvis.y;
      %       end
    end
    
    function [] = testSwitchingLegs()
      %% check what happens at the end of a step:
      
      limitCycleSplayInitial = ThreeDWalkerSplayState([0 0 1.0000 0.2800   -0.3193   -0.2425    0.3383   -0.4035    0.4032   -0.0955    0.1396   -0.1496    0.4729    0.1873    0.3827    0.0484]');
      walker = ThreeDWalkerSplay();
      walker.groundAngle = 0.1113;
      walker.KSwing = 0.1098;
      
      figure;
      [nextState, finalTime, allStates, allTimes, walker2] = walker.oneStep(limitCycleSplayInitial.getVector(), 'interleaveAnimation', 1);
      %       walker.plot(nextState);
      figure;
      walker2.plot(nextState);
      [nextState2, finalTime, allStates, allTimes, walker3] = walker2.oneStep(nextState, 'interleaveAnimation', 1);
      
      thisState = limitCycleSplayInitial;
      thisWalker = walker;
      
      figure;
      for i = 1 : 10
        thisState.getVector()'
        [thisState, finalTime, allStates, allTimes, thisWalker] = thisWalker.oneStep(thisState, 'interleaveAnimation', 1);
      end
    end
    
    function [] = testEnergy()
      %% test energy conservation during random falling
      
      % Initial conditions chosen by hand to give something that looks like a step, but isn't
      format compact;
      
      initialConditions = ThreeDWalkerSplayTorsoState();
      
      walker = ThreeDWalkerSplayTorso();
      walker.annotatePlotsWithText = 1;
      
      %       walker.legMassVerticalOffset = 0;
      %             walker.MLeg = 1e-5;
      %       walker.ILeg = 1e-5;
      walker.KSwing = 0.0;
      %       walker.KSwing = 0.03;
      
%       walker.alwaysInFlightPhase = 1;
      
%             walker.g = 0;
      %       walker.groundAngle = 0;
      %       walker.torsoHeight = 0;
      %       walker.MTorso = 1e-5;
      %       walker.ITorso = 1e-5;
      
      
      initialConditions.pelvis.xDot = 0.08;
      initialConditions.pelvis.yDot = -0.1;
      initialConditions.pelvis.zDot = 0.1;
      
      initialConditions.pelvis.roll = 0;
      initialConditions.pelvis.rollDot = -0.1;
      
      initialConditions.stanceLeg.roll = -0.08;
      initialConditions.stanceLeg.pitch = -0.08;
      initialConditions.stanceLeg.pitchDot = 0.03;
      
      initialConditions.swingLeg.roll = -0.2;
      initialConditions.swingLeg.pitch = 0.08;
      initialConditions.swingLeg.pitchDot = -0.3;
      
      %%
      figure
      walker.plot(initialConditions);
      initialConditionsSwitched = initialConditions.switchLegs(walker);
      
      figure
      walker.plot(initialConditionsSwitched);
      
      %%
      % ensure the velocities start consistent with the stance phase
      mode = 'stanceFootRolling';
      [qs, us] = walker.getQAndUIndeces();
      x = initialConditions.getVector();
      x = walker.modeTransition(0, x, mode);
      
      
      initialConditions = ThreeDWalkerSplayTorsoState(x);
      initialConditions.torso.roll = 0.1;
      initialConditions.torso.rollDot = 1;
      initialConditions.torso.pitch = 0.1;
      initialConditions.torso.pitchDot = 0.1;
      
      x = initialConditions.getVector();
      
      ThreeDWalkerSplayTorso.testEnergyConservation(walker, initialConditions);
    end
    
  end
  
  methods
    
    function [this] = ThreeDWalkerSplayTorso(input)
      %%
      if (nargin == 0)
        input = [];
      end
      this = this@ThreeDWalkerSplay(input);
      
      if (isa(input, 'ThreeDWalkerSplayTorso'))
        this.MTorso = input.MTorso;
        this.ITorso = input.ITorso;
      else
        %         this.MPelvis = 0.1;
        %         this.IPelvis = 0.01;
        
        %         this.MPelvis = 0.34;
        %         this.IPelvis = 0.025;
        
        this.MPelvis = 0.48;
        this.IPelvis = 0.04;
      end
    end

%     function [finalState, finalTime, allStates, allTimes, this, ...
%         ] = ...
%         oneStep(this, initialState, varargin)
%       [finalState, finalTime, allStates, allTimes, this] = ...
%         oneStep@ThreeDWalkerSplay(this, initialState, varargin)
%       
%     end
    
    function [inputVariables] = calculateInputVariablesAtState(this, state)
      %%
      state = ThreeDWalkerSplayTorsoState(state);
      
      %       error('running calculateInputVariablesAtState');
      [xDot, uDot, constraintForces] = ...
        this.stateDerivative(0, state.getVector(), 'stanceFootRolling');
      
      points = this.getKinematicPoints(state);
      
      inputVariables.torsoRollAcceleration = uDot(9);
      
      groundForce = constraintForces(1:3);
      footCenterLateralForce = constraintForces(4);
      stanceFootRollTorque = -footCenterLateralForce * this.R;
      
      inputVariables.ankleTorque = stanceFootRollTorque;
      
      %       tau = r x f;
      %       stanceFootRollTorque = -stanceAnkleTorqueLateralOffset * groundForce(3);
      stanceAnkleTorqueLateralOffset = -stanceFootRollTorque / groundForce(3);
      
      %       crossProductMatrix = [ ...
      %         0 -r(3) r(2);
      %         r(3) 0 -r(1);
      %         -r(2) r(1) 0];
      %
      %       rCrossF = [ ...
      %              0      -r(3)*f(2)   r(2)*f(3);
      %          r(3)*f(1)       0      -r(1)*f(3);
      %         -r(2)*f(1)   r(1)*f(2)       0    ];
      %
      %       rCrossF = [ ...
      %         0 0  r(2)*f(3);
      %         0 0 -r(1)*f(3);
      %         0 0 0    ];

      centerOfPressure = points.stanceFootContactPoint + [0 stanceAnkleTorqueLateralOffset 0];
      inputVariables.centerOfPressureX = centerOfPressure(1);
      inputVariables.centerOfPressureY = centerOfPressure(2);
      inputVariables.centerOfPressureZ = centerOfPressure(3);
      
      footPosition = points.stanceFootContactPoint;
      inputVariables.footPositionX = footPosition(1);
      inputVariables.footPositionY = footPosition(2);
      inputVariables.footPositionZ = footPosition(3);
    end
    
    function [] = plot(this, state, varargin)
      %%
      
      plotLegsSwitched = 0;
      initialPelvisY = 0;
      %       aviWriter = [];
      %       shouldAntiAlias = 0;
      drawCOMs = 1;
      
      for i = 1 : 2 : length(varargin)
        option = varargin{i};
        value = varargin{i + 1};
        switch option
          case 'plotLegsSwitched'
            plotLegsSwitched = value;
          case 'initialPelvisY'
            initialPelvisY = value;
            %           case 'aviWriter'
            %             aviWriter = value;
            %           case 'shouldAntiAlias'
            %             shouldAntiAlias = value;
          case 'drawCOMs'
            drawCOMs = value;
        end
      end
      
      %%
      state = this.getWalkerStateObjectFromVector(state);
      
      switchedLegsWalker = this;
      switchedLegsState = state;
      
      if (plotLegsSwitched)
        switchedLegsState = switchedLegsState.switchLegsSignsNotNames(switchedLegsWalker, initialPelvisY);
        switchedLegsWalker.pelvisWidth = -switchedLegsWalker.pelvisWidth;
      end
      
      points = switchedLegsWalker.getKinematicPoints(switchedLegsState);
      
      plotter = WalkerPlotter;
      
      if (drawCOMs)
        plotter.drawCOMSymbol(points.torso);
      end
      
      pelvisMid = mean([points.stanceHipPoint; points.swingHipPoint]);
      plotter.plotSegmentBetweenPoints(pelvisMid, points.torso.position);
      
      plot@ThreeDWalkerSplay(this, state, varargin{:});
    end
    
    function [state] = getWalkerStateObjectFromVector(this, stateVector)
      %%
      state = ThreeDWalkerSplayTorsoState(stateVector);
    end
    
    function [qs, us] = getQAndUIndeces(this)
      %%
      qs = 1:9;
      us = 10:18;
    end
    
    function [] = setWalkerParamsInCurrentFunction(this)
      %%
      ws = 'caller';
      assignin(ws, 'L', this.L);
      assignin(ws, 'R', this.R);
      assignin(ws, 'MPelvis', this.MPelvis);
      assignin(ws, 'IPelvis', this.IPelvis);
      assignin(ws, 'pelvisWidth', this.pelvisWidth);
      assignin(ws, 'MLeg', this.MLeg);
      assignin(ws, 'ILeg', this.ILeg);
      assignin(ws, 'legMassVerticalOffset', this.legMassVerticalOffset);
      assignin(ws, 'legMassForwardOffset', this.legMassForwardOffset);
      assignin(ws, 'splayAngle', this.splayAngle);
      assignin(ws, 'g', this.g);
      assignin(ws, 'groundAngle', this.groundAngle);
      assignin(ws, 'KSwing', this.KSwing);
      assignin(ws, 'KSwingRoll', this.KSwingRoll);
      
      assignin(ws, 'KTorsoRoll', this.KTorsoRoll);
      assignin(ws, 'BTorsoRoll', this.BTorsoRoll);
      
      assignin(ws, 'lateralPelvisForce', this.lateralPelvisForce);
      
      assignin(ws, 'ILegSmall', this.ILegSmall);
      assignin(ws, 'stanceAnkleTorque', this.stanceAnkleTorque);
      assignin(ws, 'extraSwingTorque', this.extraSwingTorque);
      assignin(ws, 'forceBetweenLegs', this.forceBetweenLegs);
      
      assignin(ws, 'MTorso', this.MTorso);
      assignin(ws, 'ITorso', this.ITorso);
      assignin(ws, 'torsoHeight', this.torsoHeight);
      assignin(ws, 'torsoRollTorque', this.torsoRollTorque);
    end
    
%     function [] = 
    
    function [points] = getKinematicPoints(this, state, uDot)
      %%
      state = this.getWalkerStateObjectFromVector(state);
      
      state.setQsUsAndTrigInCurrentFunction();
      this.setWalkerParamsInCurrentFunction();
      
points.pelvis.position(1) = q1; 
points.pelvis.position(2) = q2; 
points.pelvis.position(3) = q3; 


points.pelvis.velocity(1) = u1; 
points.pelvis.velocity(2) = u2; 
points.pelvis.velocity(3) = u3; 


points.pelvis.R(1,1) = 1; points.pelvis.R(1,2) = 0; points.pelvis.R(1,3) = 0; 
points.pelvis.R(2,1) = 0; points.pelvis.R(2,2) = c4; points.pelvis.R(2,3) = ...
-s4; 
points.pelvis.R(3,1) = 0; points.pelvis.R(3,2) = s4; points.pelvis.R(3,3) = ...
c4; 


points.stanceLeg.position(1) = q1 - c6*s5*legMassVerticalOffset; 
points.stanceLeg.position(2) = q2 - (-(c5*c6*s4) - ...
c4*s6)*legMassVerticalOffset + (c4*pelvisWidth)/2.; 
points.stanceLeg.position(3) = q3 - (c4*c5*c6 - s4*s6)*legMassVerticalOffset ...
+ (s4*pelvisWidth)/2.; 


points.stanceLeg.velocity(1) = u1 - c5*(s5*s6*u4 + ...
c6*u5)*legMassVerticalOffset + s5*s6*(c5*u4 + u6)*legMassVerticalOffset; 
points.stanceLeg.velocity(2) = u2 + (c4*c6 - c5*s4*s6)*(c5*u4 + ...
u6)*legMassVerticalOffset + s4*(-(s5*(s5*s6*u4 + ...
c6*u5)*legMassVerticalOffset) - (u4*pelvisWidth)/2.); 
points.stanceLeg.velocity(3) = u3 + (c6*s4 + c4*c5*s6)*(c5*u4 + ...
u6)*legMassVerticalOffset + c4*(s5*(s5*s6*u4 + c6*u5)*legMassVerticalOffset + ...
(u4*pelvisWidth)/2.); 


points.stanceLeg.R(1,1) = c5; points.stanceLeg.R(1,2) = s5*s6; ...
points.stanceLeg.R(1,3) = c6*s5; 
points.stanceLeg.R(2,1) = s4*s5; points.stanceLeg.R(2,2) = c4*c6 - c5*s4*s6; ...
points.stanceLeg.R(2,3) = -(c5*c6*s4) - c4*s6; 
points.stanceLeg.R(3,1) = -(c4*s5); points.stanceLeg.R(3,2) = c6*s4 + ...
c4*c5*s6; points.stanceLeg.R(3,3) = c4*c5*c6 - s4*s6; 


points.swingLeg.position(1) = q1 - c8*s7*legMassVerticalOffset; 
points.swingLeg.position(2) = q2 - (-(c7*c8*s4) - ...
c4*s8)*legMassVerticalOffset - (c4*pelvisWidth)/2.; 
points.swingLeg.position(3) = q3 - (c4*c7*c8 - s4*s8)*legMassVerticalOffset - ...
(s4*pelvisWidth)/2.; 


points.swingLeg.velocity(1) = u1 - c7*(s7*s8*u4 + ...
c8*u7)*legMassVerticalOffset + s7*s8*(c7*u4 + u8)*legMassVerticalOffset; 
points.swingLeg.velocity(2) = u2 + (c4*c8 - c7*s4*s8)*(c7*u4 + ...
u8)*legMassVerticalOffset + s4*(-(s7*(s7*s8*u4 + ...
c8*u7)*legMassVerticalOffset) + (u4*pelvisWidth)/2.); 
points.swingLeg.velocity(3) = u3 + (c8*s4 + c4*c7*s8)*(c7*u4 + ...
u8)*legMassVerticalOffset + c4*(s7*(s7*s8*u4 + c8*u7)*legMassVerticalOffset - ...
(u4*pelvisWidth)/2.); 


points.swingLeg.R(1,1) = c7; points.swingLeg.R(1,2) = s7*s8; ...
points.swingLeg.R(1,3) = c8*s7; 
points.swingLeg.R(2,1) = s4*s7; points.swingLeg.R(2,2) = c4*c8 - c7*s4*s8; ...
points.swingLeg.R(2,3) = -(c7*c8*s4) - c4*s8; 
points.swingLeg.R(3,1) = -(c4*s7); points.swingLeg.R(3,2) = c8*s4 + c4*c7*s8; ...
points.swingLeg.R(3,3) = c4*c7*c8 - s4*s8; 


points.torso.position(1) = q1; 
points.torso.position(2) = q2 - s4p9*torsoHeight; 
points.torso.position(3) = q3 + c4p9*torsoHeight; 


points.torso.velocity(1) = u1; 
points.torso.velocity(2) = u2 - c4p9*(u4 + u9)*torsoHeight; 
points.torso.velocity(3) = u3 - s4p9*(u4 + u9)*torsoHeight; 


points.torso.R(1,1) = 1; points.torso.R(1,2) = 0; points.torso.R(1,3) = 0; 
points.torso.R(2,1) = 0; points.torso.R(2,2) = c4p9; points.torso.R(2,3) = ...
-s4p9; 
points.torso.R(3,1) = 0; points.torso.R(3,2) = s4p9; points.torso.R(3,3) = ...
c4p9; 


points.stanceFootCenter(1) = q1 + c6*s5*(-1 + R); 
points.stanceFootCenter(2) = q2 + (c4*pelvisWidth)/2. + (-(c5*c6*s4) - ...
c4*s6)*(-1 + R); 
points.stanceFootCenter(3) = q3 + (s4*pelvisWidth)/2. + (c4*c5*c6 - ...
s4*s6)*(-1 + R); 


points.swingFootCenter(1) = q1 + c8*s7*(-1 + R); 
points.swingFootCenter(2) = q2 - (c4*pelvisWidth)/2. + (-(c7*c8*s4) - ...
c4*s8)*(-1 + R); 
points.swingFootCenter(3) = q3 - (s4*pelvisWidth)/2. + (c4*c7*c8 - s4*s8)*(-1 ...
+ R); 


points.stanceFootContactPoint(1) = q1 + c6*s5*(-1 + R); 
points.stanceFootContactPoint(2) = q2 + (c4*pelvisWidth)/2. + (-(c5*c6*s4) - ...
c4*s6)*(-1 + R); 
points.stanceFootContactPoint(3) = q3 + (s4*pelvisWidth)/2. + (c4*c5*c6 - ...
s4*s6)*(-1 + R) - R; 


points.swingFootContactPoint(1) = q1 + c8*s7*(-1 + R); 
points.swingFootContactPoint(2) = q2 - (c4*pelvisWidth)/2. + (-(c7*c8*s4) - ...
c4*s8)*(-1 + R); 
points.swingFootContactPoint(3) = q3 - (s4*pelvisWidth)/2. + (c4*c7*c8 - ...
s4*s8)*(-1 + R) - R; 


points.stanceHipPoint(1) = q1; 
points.stanceHipPoint(2) = q2 + (c4*pelvisWidth)/2.; 
points.stanceHipPoint(3) = q3 + (s4*pelvisWidth)/2.; 


points.swingHipPoint(1) = q1; 
points.swingHipPoint(2) = q2 - (c4*pelvisWidth)/2.; 
points.swingHipPoint(3) = q3 - (s4*pelvisWidth)/2.; 


points.comVelocity(1) = u1 - c5*(s5*s6*u4 + ...
c6*u5)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + MTorso,-1) + ...
s5*s6*(c5*u4 + u6)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + ...
MTorso,-1) - c7*(s7*s8*u4 + c8*u7)*legMassVerticalOffset*MLeg*power(2*MLeg + ...
MPelvis + MTorso,-1) + s7*s8*(c7*u4 + ...
u8)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + MTorso,-1); 
points.comVelocity(2) = u2 + (c4*c6 - c5*s4*s6)*(c5*u4 + ...
u6)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + MTorso,-1) + (c4*c8 - ...
c7*s4*s8)*(c7*u4 + u8)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + ...
MTorso,-1) - c4p9*(u4 + u9)*MTorso*torsoHeight*power(2*MLeg + MPelvis + ...
MTorso,-1) + s4*(-(s5*(s5*s6*u4 + ...
c6*u5)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + MTorso,-1)) - ...
s7*(s7*s8*u4 + c8*u7)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + ...
MTorso,-1)); 
points.comVelocity(3) = u3 + (c6*s4 + c4*c5*s6)*(c5*u4 + ...
u6)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + MTorso,-1) + (c8*s4 + ...
c4*c7*s8)*(c7*u4 + u8)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + ...
MTorso,-1) - s4p9*(u4 + u9)*MTorso*torsoHeight*power(2*MLeg + MPelvis + ...
MTorso,-1) + c4*(s5*(s5*s6*u4 + ...
c6*u5)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + MTorso,-1) + ...
s7*(s7*s8*u4 + c8*u7)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + ...
MTorso,-1)); 


points.velStanceFootContactPoint(1) = u1 + c5*(s5*s6*u4 + c6*u5)*(-1 + R) - ...
s5*s6*(c5*u4 + u6)*(-1 + R) - (c4*u5 + s4*s5*u6)*R; 
points.velStanceFootContactPoint(2) = u2 + s4*(-(u4*pelvisWidth)/2. + ...
s5*(s5*s6*u4 + c6*u5)*(-1 + R)) - (c4*c6 - c5*s4*s6)*(c5*u4 + u6)*(-1 + R) + ...
(u4 + c5*u6)*R; 
points.velStanceFootContactPoint(3) = u3 + c4*((u4*pelvisWidth)/2. - ...
s5*(s5*s6*u4 + c6*u5)*(-1 + R)) - (c6*s4 + c4*c5*s6)*(c5*u4 + u6)*(-1 + R); 


points.centerOfMassPosition(1) = q1 - ...
c6*s5*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + MTorso,-1) - ...
c8*s7*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + MTorso,-1); 
points.centerOfMassPosition(2) = q2 - (-(c5*c6*s4) - ...
c4*s6)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + MTorso,-1) - ...
(-(c7*c8*s4) - c4*s8)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + ...
MTorso,-1) - s4p9*MTorso*torsoHeight*power(2*MLeg + MPelvis + MTorso,-1); 
points.centerOfMassPosition(3) = q3 - (c4*c5*c6 - ...
s4*s6)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + MTorso,-1) - ...
(c4*c7*c8 - s4*s8)*legMassVerticalOffset*MLeg*power(2*MLeg + MPelvis + ...
MTorso,-1) + c4p9*MTorso*torsoHeight*power(2*MLeg + MPelvis + MTorso,-1); 


      
      
      if (nargin > 2)
        u1dot = uDot(1);
        u2dot = uDot(2);
        u3dot = uDot(3);
        u4dot = uDot(4);
        u5dot = uDot(5);
        u6dot = uDot(6);
        u7dot = uDot(7);
        u8dot = uDot(8);
        
    
points.totalForceOnCOM(1) = u1dot*(2*MLeg + MPelvis + MTorso) - ...
c5*legMassVerticalOffset*MLeg*(s5*s6*u4dot + c6*u5dot + 2*c6*s5*u4*u6 - ...
2*s6*u5*u6 + c5*c6*s5*(u4*u4)) - c7*legMassVerticalOffset*MLeg*(s7*s8*u4dot + ...
c8*u7dot + 2*c8*s7*u4*u8 - 2*s8*u7*u8 + c7*c8*s7*(u4*u4)) + ...
s5*(s6*legMassVerticalOffset*MLeg*(c5*u4dot + u6dot - 2*s5*u4*u5*(c6*c6) - ...
c6*s6*(s5*s5)*(u4*u4) + c6*s6*(u5*u5)) + ...
c6*legMassVerticalOffset*MLeg*((s5*s6*u4 + c6*u5)*(s5*s6*u4 + c6*u5) + (c5*u4 ...
+ u6)*(c5*u4 + u6))) + s7*s8*legMassVerticalOffset*MLeg*(c7*u4dot + u8dot - ...
2*s7*u4*u7*(c8*c8) - c8*s8*(s7*s7)*(u4*u4) + c8*s8*(u7*u7)) + ...
c8*s7*legMassVerticalOffset*MLeg*((s7*s8*u4 + c8*u7)*(s7*s8*u4 + c8*u7) + ...
(c7*u4 + u8)*(c7*u4 + u8)); 
points.totalForceOnCOM(2) = u2dot*(2*MLeg + MPelvis + MTorso) - c4p9*(u4dot + ...
u9dot)*MTorso*torsoHeight + s4*(-(s5*legMassVerticalOffset*MLeg*(s5*s6*u4dot ...
+ c6*u5dot + 2*c6*s5*u4*u6 - 2*s6*u5*u6 + c5*c6*s5*(u4*u4))) - ...
s7*legMassVerticalOffset*MLeg*(s7*s8*u4dot + c8*u7dot + 2*c8*s7*u4*u8 - ...
2*s8*u7*u8 + c7*c8*s7*(u4*u4))) + (c4*c6 - ...
c5*s4*s6)*legMassVerticalOffset*MLeg*(c5*u4dot + u6dot - 2*s5*u4*u5*(c6*c6) - ...
c6*s6*(s5*s5)*(u4*u4) + c6*s6*(u5*u5)) + (-(c5*c6*s4) - ...
c4*s6)*legMassVerticalOffset*MLeg*((s5*s6*u4 + c6*u5)*(s5*s6*u4 + c6*u5) + ...
(c5*u4 + u6)*(c5*u4 + u6)) + (c4*c8 - ...
c7*s4*s8)*legMassVerticalOffset*MLeg*(c7*u4dot + u8dot - 2*s7*u4*u7*(c8*c8) - ...
c8*s8*(s7*s7)*(u4*u4) + c8*s8*(u7*u7)) + (-(c7*c8*s4) - ...
c4*s8)*legMassVerticalOffset*MLeg*((s7*s8*u4 + c8*u7)*(s7*s8*u4 + c8*u7) + ...
(c7*u4 + u8)*(c7*u4 + u8)) + s4p9*MTorso*torsoHeight*((u4 + u9)*(u4 + u9)); 
points.totalForceOnCOM(3) = u3dot*(2*MLeg + MPelvis + MTorso) - s4p9*(u4dot + ...
u9dot)*MTorso*torsoHeight + c4*(s5*legMassVerticalOffset*MLeg*(s5*s6*u4dot + ...
c6*u5dot + 2*c6*s5*u4*u6 - 2*s6*u5*u6 + c5*c6*s5*(u4*u4)) + ...
s7*legMassVerticalOffset*MLeg*(s7*s8*u4dot + c8*u7dot + 2*c8*s7*u4*u8 - ...
2*s8*u7*u8 + c7*c8*s7*(u4*u4))) + (c6*s4 + ...
c4*c5*s6)*legMassVerticalOffset*MLeg*(c5*u4dot + u6dot - 2*s5*u4*u5*(c6*c6) - ...
c6*s6*(s5*s5)*(u4*u4) + c6*s6*(u5*u5)) + (c4*c5*c6 - ...
s4*s6)*legMassVerticalOffset*MLeg*((s5*s6*u4 + c6*u5)*(s5*s6*u4 + c6*u5) + ...
(c5*u4 + u6)*(c5*u4 + u6)) + (c8*s4 + ...
c4*c7*s8)*legMassVerticalOffset*MLeg*(c7*u4dot + u8dot - 2*s7*u4*u7*(c8*c8) - ...
c8*s8*(s7*s7)*(u4*u4) + c8*s8*(u7*u7)) + (c4*c7*c8 - ...
s4*s8)*legMassVerticalOffset*MLeg*((s7*s8*u4 + c8*u7)*(s7*s8*u4 + c8*u7) + ...
(c7*u4 + u8)*(c7*u4 + u8)) - c4p9*MTorso*torsoHeight*((u4 + u9)*(u4 + u9)); 


points.totalTorqueAroundCOM(1) = c5*(c5*u4dot - s5*u4*u5 + u6dot)*ILeg + ...
s7*s8*(s7*s8*u4dot + c8*u7dot - s8*u7*u8 + u4*(c7*s8*u7 + c8*s7*u8))*ILeg + ...
c7*(c7*u4dot - s7*u4*u7 + u8dot)*ILeg + c8*s7*(c8*s7*u4dot - s8*u7dot - ...
c8*u7*u8 + u4*(c7*c8*u7 - s7*s8*u8))*ILegSmall + s5*(s6*(s5*s6*u4dot + ...
c6*u5dot - s6*u5*u6 + u4*(c5*s6*u5 + c6*s5*u6))*ILeg + c6*(c6*s5*u4dot - ...
s6*u5dot - c6*u5*u6 + u4*(c5*c6*u5 - s5*s6*u6))*ILegSmall) + u4dot*IPelvis + ...
(u4dot + u9dot)*ITorso; 
points.totalTorqueAroundCOM(2) = (c4*c6 - c5*s4*s6)*(s5*s6*u4dot + c6*u5dot - ...
s6*u5*u6 + u4*(c5*s6*u5 + c6*s5*u6))*ILeg + (c4*c8 - c7*s4*s8)*(s7*s8*u4dot + ...
c8*u7dot - s8*u7*u8 + u4*(c7*s8*u7 + c8*s7*u8))*ILeg + s4*(s5*(c5*u4dot - ...
s5*u4*u5 + u6dot)*ILeg + s7*(c7*u4dot - s7*u4*u7 + u8dot)*ILeg) + ...
(-(c5*c6*s4) - c4*s6)*(c6*s5*u4dot - s6*u5dot - c6*u5*u6 + u4*(c5*c6*u5 - ...
s5*s6*u6))*ILegSmall + (-(c7*c8*s4) - c4*s8)*(c8*s7*u4dot - s8*u7dot - ...
c8*u7*u8 + u4*(c7*c8*u7 - s7*s8*u8))*ILegSmall; 
points.totalTorqueAroundCOM(3) = (c6*s4 + c4*c5*s6)*(s5*s6*u4dot + c6*u5dot - ...
s6*u5*u6 + u4*(c5*s6*u5 + c6*s5*u6))*ILeg + (c8*s4 + c4*c7*s8)*(s7*s8*u4dot + ...
c8*u7dot - s8*u7*u8 + u4*(c7*s8*u7 + c8*s7*u8))*ILeg + c4*(-(s5*(c5*u4dot - ...
s5*u4*u5 + u6dot)*ILeg) - s7*(c7*u4dot - s7*u4*u7 + u8dot)*ILeg) + (c4*c5*c6 ...
- s4*s6)*(c6*s5*u4dot - s6*u5dot - c6*u5*u6 + u4*(c5*c6*u5 - ...
s5*s6*u6))*ILegSmall + (c4*c7*c8 - s4*s8)*(c8*s7*u4dot - s8*u7dot - c8*u7*u8 ...
+ u4*(c7*c8*u7 - s7*s8*u8))*ILegSmall; 
      
        
      end
      
    end
    
    function [MM, rhs] = getMassMatrixAndRightHandSide(this, time, state)
      %%
      %       state = this.getWalkerStateObjectFromVector(state);
      %       state.setQsUsAndTrigInCurrentFunction();
      
      ThreeDWalkerSplayTorsoState.setQsUsAndTrigInCurrentFunctionFromState(state);
      this.setWalkerParamsInCurrentFunction();
      
      for i = 1 : length(this.controllers)
        this.controllers{i}.calculateControlAndSetInCurrentFunction(this, time, state);
      end
      
      %       stanceAnkleTorque
      %       state.getVector()'
      
      
MM = zeros(9,9); rhs = zeros(9,1);

% Mass Matrix
MM(1,1) = 2*MLeg + MPelvis + MTorso; MM(1,2) = 0; MM(1,3) = 0; MM(1,4) = 0; ...
MM(1,5) = -(c5*c6*legMassVerticalOffset*MLeg); MM(1,6) = ...
s5*s6*legMassVerticalOffset*MLeg; MM(1,7) = ...
-(c7*c8*legMassVerticalOffset*MLeg); MM(1,8) = ...
s7*s8*legMassVerticalOffset*MLeg; MM(1,9) = 0; 
MM(2,1) = MM(1,2); MM(2,2) = 2*MLeg + MPelvis + MTorso; MM(2,3) = 0; MM(2,4) ...
= c4*(c5*c6*legMassVerticalOffset*MLeg + c7*c8*legMassVerticalOffset*MLeg - ...
c9*MTorso*torsoHeight) - s4*(s6*legMassVerticalOffset*MLeg + ...
s8*legMassVerticalOffset*MLeg - s9*MTorso*torsoHeight); MM(2,5) = ...
-(c6*s4*s5*legMassVerticalOffset*MLeg); MM(2,6) = (c4*c6 - ...
c5*s4*s6)*legMassVerticalOffset*MLeg; MM(2,7) = ...
-(c8*s4*s7*legMassVerticalOffset*MLeg); MM(2,8) = (c4*c8 - ...
c7*s4*s8)*legMassVerticalOffset*MLeg; MM(2,9) = -(c4p9*MTorso*torsoHeight); 
MM(3,1) = MM(1,3); MM(3,2) = MM(2,3); MM(3,3) = 2*MLeg + MPelvis + MTorso; ...
MM(3,4) = c5*c6*s4*legMassVerticalOffset*MLeg + ...
c7*c8*s4*legMassVerticalOffset*MLeg + c4*s6*legMassVerticalOffset*MLeg + ...
c4*s8*legMassVerticalOffset*MLeg - c9*s4*MTorso*torsoHeight - ...
c4*s9*MTorso*torsoHeight; MM(3,5) = c4*c6*s5*legMassVerticalOffset*MLeg; ...
MM(3,6) = (c6*s4 + c4*c5*s6)*legMassVerticalOffset*MLeg; MM(3,7) = ...
c4*c8*s7*legMassVerticalOffset*MLeg; MM(3,8) = (c8*s4 + ...
c4*c7*s8)*legMassVerticalOffset*MLeg; MM(3,9) = -(s4p9*MTorso*torsoHeight); 
MM(4,1) = MM(1,4); MM(4,2) = MM(2,4); MM(4,3) = MM(3,4); MM(4,4) = IPelvis + ...
ITorso + s6*legMassVerticalOffset*MLeg*pelvisWidth - ...
s8*legMassVerticalOffset*MLeg*pelvisWidth + ILegSmall*(c6*c6)*(s5*s5) + ...
ILeg*(s5*s5)*(s6*s6) + ILegSmall*(c8*c8)*(s7*s7) + ILeg*(s7*s7)*(s8*s8) + ...
MLeg*(s5*s5)*(s6*s6)*(legMassVerticalOffset*legMassVerticalOffset) + ...
MLeg*(s7*s7)*(s8*s8)*(legMassVerticalOffset*legMassVerticalOffset) + ...
c5*c5*(ILeg + MLeg*(legMassVerticalOffset*legMassVerticalOffset)) + ...
c7*c7*(ILeg + MLeg*(legMassVerticalOffset*legMassVerticalOffset)) + ...
(MLeg*(pelvisWidth*pelvisWidth))/2. + MTorso*(torsoHeight*torsoHeight); ...
MM(4,5) = (c6*s5*(legMassVerticalOffset*MLeg*pelvisWidth + 2*s6*(ILeg - ...
ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))))/2.; MM(4,6) ...
= (c5*(s6*legMassVerticalOffset*MLeg*pelvisWidth + 2*(ILeg + ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset))))/2.; MM(4,7) = ...
(c8*s7*(-(legMassVerticalOffset*MLeg*pelvisWidth) + 2*s8*(ILeg - ILegSmall + ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset))))/2.; MM(4,8) = ...
(c7*(-(s8*legMassVerticalOffset*MLeg*pelvisWidth) + 2*(ILeg + ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset))))/2.; MM(4,9) = ITorso + ...
MTorso*(torsoHeight*torsoHeight); 
MM(5,1) = MM(1,5); MM(5,2) = MM(2,5); MM(5,3) = MM(3,5); MM(5,4) = MM(4,5); ...
MM(5,5) = ILegSmall*(s6*s6) + c6*c6*(ILeg + ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset)); MM(5,6) = 0; MM(5,7) = ...
0; MM(5,8) = 0; MM(5,9) = 0; 
MM(6,1) = MM(1,6); MM(6,2) = MM(2,6); MM(6,3) = MM(3,6); MM(6,4) = MM(4,6); ...
MM(6,5) = MM(5,6); MM(6,6) = ILeg + ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset); MM(6,7) = 0; MM(6,8) = 0; ...
MM(6,9) = 0; 
MM(7,1) = MM(1,7); MM(7,2) = MM(2,7); MM(7,3) = MM(3,7); MM(7,4) = MM(4,7); ...
MM(7,5) = MM(5,7); MM(7,6) = MM(6,7); MM(7,7) = ILegSmall*(s8*s8) + ...
c8*c8*(ILeg + MLeg*(legMassVerticalOffset*legMassVerticalOffset)); MM(7,8) = ...
0; MM(7,9) = 0; 
MM(8,1) = MM(1,8); MM(8,2) = MM(2,8); MM(8,3) = MM(3,8); MM(8,4) = MM(4,8); ...
MM(8,5) = MM(5,8); MM(8,6) = MM(6,8); MM(8,7) = MM(7,8); MM(8,8) = ILeg + ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset); MM(8,9) = 0; 
MM(9,1) = MM(1,9); MM(9,2) = MM(2,9); MM(9,3) = MM(3,9); MM(9,4) = MM(4,9); ...
MM(9,5) = MM(5,9); MM(9,6) = MM(6,9); MM(9,7) = MM(7,9); MM(9,8) = MM(8,9); ...
MM(9,9) = ITorso + MTorso*(torsoHeight*torsoHeight); 

% righthand side terms
% rhs(1) = -2*c5*s6*u5*u6*legMassVerticalOffset*MLeg - ...
% 2*c7*s8*u7*u8*legMassVerticalOffset*MLeg - ...
% c6*s5*legMassVerticalOffset*MLeg*(u5*u5) - ...
% c6*s5*legMassVerticalOffset*MLeg*(u6*u6) - ...
% c8*s7*legMassVerticalOffset*MLeg*(u7*u7) - ...
% c8*s7*legMassVerticalOffset*MLeg*(u8*u8) + 2*g*MLeg*sin(groundAngle) + ...
% g*MPelvis*sin(groundAngle) + g*MTorso*sin(groundAngle); 
% rhs(2) = lateralPelvisForce - 2*s4*s5*s6*u5*u6*legMassVerticalOffset*MLeg - ...
% 2*s4*s7*s8*u7*u8*legMassVerticalOffset*MLeg + ...
% 2*u4*(c4*c6*s5*u5*legMassVerticalOffset*MLeg + (c6*s4 + ...
% c4*c5*s6)*u6*legMassVerticalOffset*MLeg + ...
% c4*c8*s7*u7*legMassVerticalOffset*MLeg + c8*s4*u8*legMassVerticalOffset*MLeg ...
% + c4*c7*s8*u8*legMassVerticalOffset*MLeg - c9*s4*u9*MTorso*torsoHeight - ...
% c4*s9*u9*MTorso*torsoHeight) + (c5*c6*s4*legMassVerticalOffset*MLeg + ...
% c7*c8*s4*legMassVerticalOffset*MLeg + c4*s6*legMassVerticalOffset*MLeg + ...
% c4*s8*legMassVerticalOffset*MLeg - c9*s4*MTorso*torsoHeight - ...
% c4*s9*MTorso*torsoHeight)*(u4*u4) + ...
% c5*c6*s4*legMassVerticalOffset*MLeg*(u5*u5) + ...
% c5*c6*s4*legMassVerticalOffset*MLeg*(u6*u6) + ...
% c4*s6*legMassVerticalOffset*MLeg*(u6*u6) + ...
% c7*c8*s4*legMassVerticalOffset*MLeg*(u7*u7) + ...
% c7*c8*s4*legMassVerticalOffset*MLeg*(u8*u8) + ...
% c4*s8*legMassVerticalOffset*MLeg*(u8*u8) - c9*s4*MTorso*torsoHeight*(u9*u9) - ...
% c4*s9*MTorso*torsoHeight*(u9*u9); 
% rhs(3) = 2*c4*s5*s6*u5*u6*legMassVerticalOffset*MLeg + ...
% 2*c4*s7*s8*u7*u8*legMassVerticalOffset*MLeg + ...
% 2*u4*(c6*s4*s5*u5*legMassVerticalOffset*MLeg + (-(c4*c6) + ...
% c5*s4*s6)*u6*legMassVerticalOffset*MLeg + ...
% c8*s4*s7*u7*legMassVerticalOffset*MLeg - c4*c8*u8*legMassVerticalOffset*MLeg ...
% + c7*s4*s8*u8*legMassVerticalOffset*MLeg + c4*c9*u9*MTorso*torsoHeight - ...
% s4*s9*u9*MTorso*torsoHeight) - 2*g*MLeg*cos(groundAngle) - ...
% g*MPelvis*cos(groundAngle) - g*MTorso*cos(groundAngle) + ...
% (-(c4*(c5*c6*legMassVerticalOffset*MLeg + c7*c8*legMassVerticalOffset*MLeg - ...
% c9*MTorso*torsoHeight)) + s4*(s6*legMassVerticalOffset*MLeg + ...
% s8*legMassVerticalOffset*MLeg - s9*MTorso*torsoHeight))*(u4*u4) - ...
% c4*c5*c6*legMassVerticalOffset*MLeg*(u5*u5) - ...
% c4*c5*c6*legMassVerticalOffset*MLeg*(u6*u6) + ...
% s4*s6*legMassVerticalOffset*MLeg*(u6*u6) - ...
% c4*c7*c8*legMassVerticalOffset*MLeg*(u7*u7) - ...
% c4*c7*c8*legMassVerticalOffset*MLeg*(u8*u8) + ...
% s4*s8*legMassVerticalOffset*MLeg*(u8*u8) + c4*c9*MTorso*torsoHeight*(u9*u9) - ...
% s4*s9*MTorso*torsoHeight*(u9*u9); 
% rhs(4) = (g*MLeg*(-2*c7*c8*s4*legMassVerticalOffset + ...
% c4*(-2*s8*legMassVerticalOffset + pelvisWidth))*cos(groundAngle) + ...
% 2*s4p9*g*MTorso*torsoHeight*cos(groundAngle) + 2*c5*(stanceAnkleTorque - ...
% (c6*s4 + c4*c5*s6)*g*legMassVerticalOffset*MLeg*cos(groundAngle)) - ...
% c4*g*MLeg*cos(groundAngle)*(pelvisWidth + 2*s6*legMassVerticalOffset*(s5*s5)) ...
% + 2*s5*u5*u6*(ILeg + s6*legMassVerticalOffset*MLeg*pelvisWidth + ...
% MLeg*(legMassVerticalOffset*legMassVerticalOffset) - cos(2*q6)*(ILeg - ...
% ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))) + ...
% 2*s7*u7*u8*(ILeg - s8*legMassVerticalOffset*MLeg*pelvisWidth + ...
% MLeg*(legMassVerticalOffset*legMassVerticalOffset) - cos(2*q8)*(ILeg - ...
% ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))) - ...
% c5*c6*(legMassVerticalOffset*MLeg*pelvisWidth*(u6*u6) + ...
% u5*u5*(legMassVerticalOffset*MLeg*pelvisWidth + 2*s6*(ILeg - ILegSmall + ...
% MLeg*(legMassVerticalOffset*legMassVerticalOffset)))) + ...
% c7*c8*(legMassVerticalOffset*MLeg*pelvisWidth*(u8*u8) + ...
% u7*u7*(legMassVerticalOffset*MLeg*pelvisWidth - 2*s8*(ILeg - ILegSmall + ...
% MLeg*(legMassVerticalOffset*legMassVerticalOffset)))) + ...
% 2*u4*(c6*u6*(-(legMassVerticalOffset*MLeg*pelvisWidth) - 2*s6*(s5*s5)*(ILeg - ...
% ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))) + ...
% c8*u8*(legMassVerticalOffset*MLeg*pelvisWidth - 2*s8*(s7*s7)*(ILeg - ...
% ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))) + ...
% u5*(c6*c6)*(ILeg - ILegSmall + ...
% MLeg*(legMassVerticalOffset*legMassVerticalOffset))*sin(2*q5) + ...
% u7*(c8*c8)*(ILeg - ILegSmall + ...
% MLeg*(legMassVerticalOffset*legMassVerticalOffset))*sin(2*q7)))/2.; 
% rhs(5) = extraSwingTorque + (-q5 + q7)*KSwing + s5*u4*(-(c5*u4*(c6*c6)*(ILeg ...
% - ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))) - u6*(ILeg ...
% + MLeg*(legMassVerticalOffset*legMassVerticalOffset) + cos(2*q6)*(ILeg - ...
% ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset)))) + ...
% u5*u6*(ILeg - ILegSmall + ...
% MLeg*(legMassVerticalOffset*legMassVerticalOffset))*sin(2*q6) - ...
% c6*g*legMassVerticalOffset*MLeg*(c4*s5*cos(groundAngle) + ...
% c5*sin(groundAngle)); 
% rhs(6) = stanceAnkleTorque - (c6*s4 + ...
% c4*c5*s6)*g*legMassVerticalOffset*MLeg*cos(groundAngle) + s5*u4*u5*(ILeg + ...
% MLeg*(legMassVerticalOffset*legMassVerticalOffset) + cos(2*q6)*(ILeg - ...
% ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))) + ...
% (c6*(-2*s6*(u5*u5)*(ILeg - ILegSmall + ...
% MLeg*(legMassVerticalOffset*legMassVerticalOffset)) + ...
% u4*u4*(legMassVerticalOffset*MLeg*pelvisWidth + 2*s6*(s5*s5)*(ILeg - ...
% ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset)))))/2. + ...
% s5*s6*g*legMassVerticalOffset*MLeg*sin(groundAngle); 
% rhs(7) = -extraSwingTorque + (q5 - q7)*KSwing + s7*u4*(-(c7*u4*(c8*c8)*(ILeg ...
% - ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))) - u8*(ILeg ...
% + MLeg*(legMassVerticalOffset*legMassVerticalOffset) + cos(2*q8)*(ILeg - ...
% ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset)))) + ...
% u7*u8*(ILeg - ILegSmall + ...
% MLeg*(legMassVerticalOffset*legMassVerticalOffset))*sin(2*q8) - ...
% c8*g*legMassVerticalOffset*MLeg*(c4*s7*cos(groundAngle) + ...
% c7*sin(groundAngle)); 
% rhs(8) = c7*(q4 - q8)*KSwingRoll - (c8*s4 + ...
% c4*c7*s8)*g*legMassVerticalOffset*MLeg*cos(groundAngle) + s7*u4*u7*(ILeg + ...
% MLeg*(legMassVerticalOffset*legMassVerticalOffset) + cos(2*q8)*(ILeg - ...
% ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))) + ...
% (c8*(-2*s8*(u7*u7)*(ILeg - ILegSmall + ...
% MLeg*(legMassVerticalOffset*legMassVerticalOffset)) + ...
% u4*u4*(-(legMassVerticalOffset*MLeg*pelvisWidth) + 2*s8*(s7*s7)*(ILeg - ...
% ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset)))))/2. + ...
% s7*s8*g*legMassVerticalOffset*MLeg*sin(groundAngle); 
% rhs(9) = torsoRollTorque + s4p9*g*MTorso*torsoHeight*cos(groundAngle); 


% righthand side terms
% righthand side terms
% righthand side terms
rhs(1) = -2*c5*s6*u5*u6*legMassVerticalOffset*MLeg - ...
2*c7*s8*u7*u8*legMassVerticalOffset*MLeg - ...
c6*s5*legMassVerticalOffset*MLeg*(u5*u5) - ...
c6*s5*legMassVerticalOffset*MLeg*(u6*u6) - ...
c8*s7*legMassVerticalOffset*MLeg*(u7*u7) - ...
c8*s7*legMassVerticalOffset*MLeg*(u8*u8) + 2*g*MLeg*sin(groundAngle) + ...
g*MPelvis*sin(groundAngle) + g*MTorso*sin(groundAngle); 
rhs(2) = lateralPelvisForce - 2*s4*s5*s6*u5*u6*legMassVerticalOffset*MLeg - ...
2*s4*s7*s8*u7*u8*legMassVerticalOffset*MLeg + ...
2*u4*(c4*c6*s5*u5*legMassVerticalOffset*MLeg + (c6*s4 + ...
c4*c5*s6)*u6*legMassVerticalOffset*MLeg + ...
c4*c8*s7*u7*legMassVerticalOffset*MLeg + c8*s4*u8*legMassVerticalOffset*MLeg ...
+ c4*c7*s8*u8*legMassVerticalOffset*MLeg - c9*s4*u9*MTorso*torsoHeight - ...
c4*s9*u9*MTorso*torsoHeight) + (c5*c6*s4*legMassVerticalOffset*MLeg + ...
c7*c8*s4*legMassVerticalOffset*MLeg + c4*s6*legMassVerticalOffset*MLeg + ...
c4*s8*legMassVerticalOffset*MLeg - c9*s4*MTorso*torsoHeight - ...
c4*s9*MTorso*torsoHeight)*(u4*u4) + ...
c5*c6*s4*legMassVerticalOffset*MLeg*(u5*u5) + ...
c5*c6*s4*legMassVerticalOffset*MLeg*(u6*u6) + ...
c4*s6*legMassVerticalOffset*MLeg*(u6*u6) + ...
c7*c8*s4*legMassVerticalOffset*MLeg*(u7*u7) + ...
c7*c8*s4*legMassVerticalOffset*MLeg*(u8*u8) + ...
c4*s8*legMassVerticalOffset*MLeg*(u8*u8) - c9*s4*MTorso*torsoHeight*(u9*u9) - ...
c4*s9*MTorso*torsoHeight*(u9*u9); 
rhs(3) = 2*c4*s5*s6*u5*u6*legMassVerticalOffset*MLeg + ...
2*c4*s7*s8*u7*u8*legMassVerticalOffset*MLeg + ...
2*u4*(c6*s4*s5*u5*legMassVerticalOffset*MLeg + (-(c4*c6) + ...
c5*s4*s6)*u6*legMassVerticalOffset*MLeg + ...
c8*s4*s7*u7*legMassVerticalOffset*MLeg - c4*c8*u8*legMassVerticalOffset*MLeg ...
+ c7*s4*s8*u8*legMassVerticalOffset*MLeg + c4*c9*u9*MTorso*torsoHeight - ...
s4*s9*u9*MTorso*torsoHeight) - 2*g*MLeg*cos(groundAngle) - ...
g*MPelvis*cos(groundAngle) - g*MTorso*cos(groundAngle) + ...
(-(c4*(c5*c6*legMassVerticalOffset*MLeg + c7*c8*legMassVerticalOffset*MLeg - ...
c9*MTorso*torsoHeight)) + s4*(s6*legMassVerticalOffset*MLeg + ...
s8*legMassVerticalOffset*MLeg - s9*MTorso*torsoHeight))*(u4*u4) - ...
c4*c5*c6*legMassVerticalOffset*MLeg*(u5*u5) - ...
c4*c5*c6*legMassVerticalOffset*MLeg*(u6*u6) + ...
s4*s6*legMassVerticalOffset*MLeg*(u6*u6) - ...
c4*c7*c8*legMassVerticalOffset*MLeg*(u7*u7) - ...
c4*c7*c8*legMassVerticalOffset*MLeg*(u8*u8) + ...
s4*s8*legMassVerticalOffset*MLeg*(u8*u8) + c4*c9*MTorso*torsoHeight*(u9*u9) - ...
s4*s9*MTorso*torsoHeight*(u9*u9); 
rhs(4) = s7*u7*u8*ILeg - s7*s8*u7*u8*legMassVerticalOffset*MLeg*pelvisWidth + ...
c5*stanceAnkleTorque - c5*c6*s4*g*legMassVerticalOffset*MLeg*cos(groundAngle) ...
- c7*c8*s4*g*legMassVerticalOffset*MLeg*cos(groundAngle) - ...
c4*s6*g*legMassVerticalOffset*MLeg*cos(groundAngle) - ...
c4*s8*g*legMassVerticalOffset*MLeg*cos(groundAngle) + ...
c9*s4*g*MTorso*torsoHeight*cos(groundAngle) + ...
c4*s9*g*MTorso*torsoHeight*cos(groundAngle) - s7*u7*u8*ILeg*(c8*c8) + ...
s7*u7*u8*ILegSmall*(c8*c8) + s7*u7*u8*ILeg*(s8*s8) - ...
s7*u7*u8*ILegSmall*(s8*s8) - ...
(c5*c6*legMassVerticalOffset*MLeg*pelvisWidth*(u6*u6))/2. - ...
c7*c8*s8*ILeg*(u7*u7) + c7*c8*s8*ILegSmall*(u7*u7) + ...
(c7*c8*legMassVerticalOffset*MLeg*pelvisWidth*(u7*u7))/2. + ...
(c7*c8*legMassVerticalOffset*MLeg*pelvisWidth*(u8*u8))/2. + ...
s7*u7*u8*MLeg*(legMassVerticalOffset*legMassVerticalOffset) - ...
s7*u7*u8*MLeg*(c8*c8)*(legMassVerticalOffset*legMassVerticalOffset) + ...
s7*u7*u8*MLeg*(s8*s8)*(legMassVerticalOffset*legMassVerticalOffset) - ...
c7*c8*s8*MLeg*(u7*u7)*(legMassVerticalOffset*legMassVerticalOffset) - ...
(c5*c6*(u5*u5)*(legMassVerticalOffset*MLeg*pelvisWidth + 2*s6*(ILeg - ...
ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))))/2. - ...
s5*u5*u6*(-ILeg - s6*legMassVerticalOffset*MLeg*pelvisWidth - ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset) + cos(2*q6)*(ILeg - ...
ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))) + ...
u4*(c8*u8*legMassVerticalOffset*MLeg*pelvisWidth + u5*(c6*c6)*(ILeg - ...
ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))*sin(2*q5) - ...
u6*(c6*legMassVerticalOffset*MLeg*pelvisWidth + s5*s5*(ILeg - ILegSmall + ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset))*sin(2*q6)) + ...
u7*ILeg*(c8*c8)*sin(2*q7) - u7*ILegSmall*(c8*c8)*sin(2*q7) + ...
u7*MLeg*(c8*c8)*(legMassVerticalOffset*legMassVerticalOffset)*sin(2*q7) - ...
u8*ILeg*(s7*s7)*sin(2*q8) + u8*ILegSmall*(s7*s7)*sin(2*q8) - ...
u8*MLeg*(s7*s7)*(legMassVerticalOffset*legMassVerticalOffset)*sin(2*q8)); 
rhs(5) = extraSwingTorque + (-q5 + q7)*KSwing + s5*u4*(-(c5*u4*(c6*c6)*(ILeg ...
- ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))) - u6*(ILeg ...
+ MLeg*(legMassVerticalOffset*legMassVerticalOffset) + cos(2*q6)*(ILeg - ...
ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset)))) + ...
u5*u6*(ILeg - ILegSmall + ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset))*sin(2*q6) + ...
c6*(-(c4*s5*g*legMassVerticalOffset*MLeg*cos(groundAngle)) - ...
c8*s5m7*forceBetweenLegs*(legMassVerticalOffset*legMassVerticalOffset)*power(-2*s6*legMassVerticalOffset*(s8*legMassVerticalOffset - pelvisWidth) - 2*s8*legMassVerticalOffset*pelvisWidth + 2*(legMassVerticalOffset*legMassVerticalOffset) - 2*c5*c6*c7*c8*(legMassVerticalOffset*legMassVerticalOffset) - 2*c6*c8*s5*s7*(legMassVerticalOffset*legMassVerticalOffset) + pelvisWidth*pelvisWidth,-0.5) - c5*g*legMassVerticalOffset*MLeg*sin(groundAngle)); ...

rhs(6) = stanceAnkleTorque - (c6*s4 + ...
c4*c5*s6)*g*legMassVerticalOffset*MLeg*cos(groundAngle) + s5*u4*u5*(ILeg + ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset) + cos(2*q6)*(ILeg - ...
ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))) + ...
(c6*(-2*s6*(u5*u5)*(ILeg - ILegSmall + ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset)) + ...
u4*u4*(legMassVerticalOffset*MLeg*pelvisWidth + 2*s6*(s5*s5)*(ILeg - ...
ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset)))))/2. - ...
c6*forceBetweenLegs*legMassVerticalOffset*pelvisWidth*power(-2*s6*legMassVerticalOffset*(s8*legMassVerticalOffset - pelvisWidth) - 2*s8*legMassVerticalOffset*pelvisWidth + 2*(legMassVerticalOffset*legMassVerticalOffset) - 2*c5m7*c6*c8*(legMassVerticalOffset*legMassVerticalOffset) + pelvisWidth*pelvisWidth,-0.5) - (c5m7*c8*s6 - c6*s8)*forceBetweenLegs*(legMassVerticalOffset*legMassVerticalOffset)*power(-2*s6*legMassVerticalOffset*(s8*legMassVerticalOffset - pelvisWidth) - 2*s8*legMassVerticalOffset*pelvisWidth + 2*(legMassVerticalOffset*legMassVerticalOffset) - 2*c5m7*c6*c8*(legMassVerticalOffset*legMassVerticalOffset) + pelvisWidth*pelvisWidth,-0.5) + s5*s6*g*legMassVerticalOffset*MLeg*sin(groundAngle); ...

rhs(7) = -extraSwingTorque + (q5 - q7)*KSwing + s7*u4*(-(c7*u4*(c8*c8)*(ILeg ...
- ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))) - u8*(ILeg ...
+ MLeg*(legMassVerticalOffset*legMassVerticalOffset) + cos(2*q8)*(ILeg - ...
ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset)))) + ...
u7*u8*(ILeg - ILegSmall + ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset))*sin(2*q8) + ...
c8*(-(c4*s7*g*legMassVerticalOffset*MLeg*cos(groundAngle)) + ...
c6*s5m7*forceBetweenLegs*(legMassVerticalOffset*legMassVerticalOffset)*power(-2*s6*legMassVerticalOffset*(s8*legMassVerticalOffset - pelvisWidth) - 2*s8*legMassVerticalOffset*pelvisWidth + 2*(legMassVerticalOffset*legMassVerticalOffset) - 2*c5*c6*c7*c8*(legMassVerticalOffset*legMassVerticalOffset) - 2*c6*c8*s5*s7*(legMassVerticalOffset*legMassVerticalOffset) + pelvisWidth*pelvisWidth,-0.5) - c7*g*legMassVerticalOffset*MLeg*sin(groundAngle)); ...

rhs(8) = c7*(q4 - q8)*KSwingRoll - (c8*s4 + ...
c4*c7*s8)*g*legMassVerticalOffset*MLeg*cos(groundAngle) + s7*u4*u7*(ILeg + ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset) + cos(2*q8)*(ILeg - ...
ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset))) + ...
(c8*(-2*s8*(u7*u7)*(ILeg - ILegSmall + ...
MLeg*(legMassVerticalOffset*legMassVerticalOffset)) + ...
u4*u4*(-(legMassVerticalOffset*MLeg*pelvisWidth) + 2*s8*(s7*s7)*(ILeg - ...
ILegSmall + MLeg*(legMassVerticalOffset*legMassVerticalOffset)))))/2. + ...
c8*forceBetweenLegs*legMassVerticalOffset*pelvisWidth*power(-2*s6*legMassVerticalOffset*(s8*legMassVerticalOffset - pelvisWidth) - 2*s8*legMassVerticalOffset*pelvisWidth + 2*(legMassVerticalOffset*legMassVerticalOffset) - 2*c5m7*c6*c8*(legMassVerticalOffset*legMassVerticalOffset) + pelvisWidth*pelvisWidth,-0.5) + (c8*s6 - c5m7*c6*s8)*forceBetweenLegs*(legMassVerticalOffset*legMassVerticalOffset)*power(-2*s6*legMassVerticalOffset*(s8*legMassVerticalOffset - pelvisWidth) - 2*s8*legMassVerticalOffset*pelvisWidth + 2*(legMassVerticalOffset*legMassVerticalOffset) - 2*c5m7*c6*c8*(legMassVerticalOffset*legMassVerticalOffset) + pelvisWidth*pelvisWidth,-0.5) + s7*s8*g*legMassVerticalOffset*MLeg*sin(groundAngle); ...

rhs(9) = -(u9*BTorsoRoll) - q9*KTorsoRoll + torsoRollTorque + ...
s4p9*g*MTorso*torsoHeight*cos(groundAngle); 



    end
    
    function [C, CDot] = getConstraintMatrix(this, state, mode)
      %%
      state = this.getWalkerStateObjectFromVector(state);
      
      state.setQsUsAndTrigInCurrentFunction();
      this.setWalkerParamsInCurrentFunction();
      
      if (this.alwaysInFlightPhase)
        C = []; %constraintJacobianStanceFootRolling;
        CDot = []; %constraintJacobianStanceFootRollingDot;
        return;
      end
      
      switch mode
        
        case 'swingFootRolling'
          
          
          constraintJacobianSwingFootRolling(4, 10) = 0;
          constraintJacobianSwingFootRollingDot(4, 10) = 0;
          
          
        
constraintJacobianSwingFootRolling(1,1) = 1; ...
constraintJacobianSwingFootRolling(1,2) = 0; ...
constraintJacobianSwingFootRolling(1,3) = 0; ...
constraintJacobianSwingFootRolling(1,4) = 0; ...
constraintJacobianSwingFootRolling(1,5) = 0; ...
constraintJacobianSwingFootRolling(1,6) = 0; ...
constraintJacobianSwingFootRolling(1,7) = c7*c8*(-1 + R) - c4*R; ...
constraintJacobianSwingFootRolling(1,8) = s7*(-(s8*(-1 + R)) - s4*R); ...
constraintJacobianSwingFootRolling(1,9) = 0; ...
constraintJacobianSwingFootRolling(1,10) = 0; 
constraintJacobianSwingFootRolling(2,1) = 0; ...
constraintJacobianSwingFootRolling(2,2) = 1; ...
constraintJacobianSwingFootRolling(2,3) = 0; ...
constraintJacobianSwingFootRolling(2,4) = (s4*(pelvisWidth + 2*s8*(-1 + ...
R)))/2. - c4*c7*c8*(-1 + R) + R; constraintJacobianSwingFootRolling(2,5) = 0; ...
constraintJacobianSwingFootRolling(2,6) = 0; ...
constraintJacobianSwingFootRolling(2,7) = c8*s4*s7*(-1 + R); ...
constraintJacobianSwingFootRolling(2,8) = -(c4*c8*(-1 + R)) + c7*(s4*s8*(-1 + ...
R) + R); constraintJacobianSwingFootRolling(2,9) = 0; ...
constraintJacobianSwingFootRolling(2,10) = 0; 
constraintJacobianSwingFootRolling(3,1) = 0; ...
constraintJacobianSwingFootRolling(3,2) = 0; ...
constraintJacobianSwingFootRolling(3,3) = 1; ...
constraintJacobianSwingFootRolling(3,4) = -(c4*(pelvisWidth + 2*s8*(-1 + ...
R)))/2. - c7*c8*s4*(-1 + R); constraintJacobianSwingFootRolling(3,5) = 0; ...
constraintJacobianSwingFootRolling(3,6) = 0; ...
constraintJacobianSwingFootRolling(3,7) = -(c4*c8*s7*(-1 + R)); ...
constraintJacobianSwingFootRolling(3,8) = -((c8*s4 + c4*c7*s8)*(-1 + R)); ...
constraintJacobianSwingFootRolling(3,9) = 0; ...
constraintJacobianSwingFootRolling(3,10) = 0; 
constraintJacobianSwingFootRolling(4,1) = 0; ...
constraintJacobianSwingFootRolling(4,2) = 1; ...
constraintJacobianSwingFootRolling(4,3) = 0; ...
constraintJacobianSwingFootRolling(4,4) = (s4*(pelvisWidth + 2*s8*(-1 + ...
R)))/2. - c4*c7*c8*(-1 + R); constraintJacobianSwingFootRolling(4,5) = 0; ...
constraintJacobianSwingFootRolling(4,6) = 0; ...
constraintJacobianSwingFootRolling(4,7) = c8*s4*s7*(-1 + R); ...
constraintJacobianSwingFootRolling(4,8) = -((c4*c8 - c7*s4*s8)*(-1 + R)); ...
constraintJacobianSwingFootRolling(4,9) = 0; ...
constraintJacobianSwingFootRolling(4,10) = 0; 


constraintJacobianSwingFootRollingDot(1,1) = 0; ...
constraintJacobianSwingFootRollingDot(1,2) = 0; ...
constraintJacobianSwingFootRollingDot(1,3) = 0; ...
constraintJacobianSwingFootRollingDot(1,4) = 0; ...
constraintJacobianSwingFootRollingDot(1,5) = 0; ...
constraintJacobianSwingFootRollingDot(1,6) = 0; ...
constraintJacobianSwingFootRollingDot(1,7) = -(c8*s7*u7*(-1 + R)) - ...
c7*s8*u8*(-1 + R) + s4*u4*R; constraintJacobianSwingFootRollingDot(1,8) = ...
c7*u7*(-(s8*(-1 + R)) - s4*R) + s7*(-(c8*u8*(-1 + R)) - c4*u4*R); ...
constraintJacobianSwingFootRollingDot(1,9) = 0; ...
constraintJacobianSwingFootRollingDot(1,10) = 0; 
constraintJacobianSwingFootRollingDot(2,1) = 0; ...
constraintJacobianSwingFootRollingDot(2,2) = 0; ...
constraintJacobianSwingFootRollingDot(2,3) = 0; ...
constraintJacobianSwingFootRollingDot(2,4) = (c4*u4*(pelvisWidth + 2*s8*(-1 + ...
R)))/2. + c7*c8*s4*u4*(-1 + R) + c4*c8*s7*u7*(-1 + R) + c8*s4*u8*(-1 + R) + ...
c4*c7*s8*u8*(-1 + R); constraintJacobianSwingFootRollingDot(2,5) = 0; ...
constraintJacobianSwingFootRollingDot(2,6) = 0; ...
constraintJacobianSwingFootRollingDot(2,7) = c4*c8*s7*u4*(-1 + R) + ...
c7*c8*s4*u7*(-1 + R) - s4*s7*s8*u8*(-1 + R); ...
constraintJacobianSwingFootRollingDot(2,8) = c7*(c4*s8*u4*(-1 + R) + ...
c8*s4*u8*(-1 + R)) + c8*s4*u4*(-1 + R) + c4*s8*u8*(-1 + R) - s7*u7*(s4*s8*(-1 ...
+ R) + R); constraintJacobianSwingFootRollingDot(2,9) = 0; ...
constraintJacobianSwingFootRollingDot(2,10) = 0; 
constraintJacobianSwingFootRollingDot(3,1) = 0; ...
constraintJacobianSwingFootRollingDot(3,2) = 0; ...
constraintJacobianSwingFootRollingDot(3,3) = 0; ...
constraintJacobianSwingFootRollingDot(3,4) = (s4*u4*(pelvisWidth + 2*s8*(-1 + ...
R)))/2. - c4*c7*c8*u4*(-1 + R) + c8*s4*s7*u7*(-1 + R) - c4*c8*u8*(-1 + R) + ...
c7*s4*s8*u8*(-1 + R); constraintJacobianSwingFootRollingDot(3,5) = 0; ...
constraintJacobianSwingFootRollingDot(3,6) = 0; ...
constraintJacobianSwingFootRollingDot(3,7) = c8*s4*s7*u4*(-1 + R) - ...
c4*c7*c8*u7*(-1 + R) + c4*s7*s8*u8*(-1 + R); ...
constraintJacobianSwingFootRollingDot(3,8) = -((c4*c8*u4 - c7*s4*s8*u4 - ...
c4*s7*s8*u7 + c4*c7*c8*u8 - s4*s8*u8)*(-1 + R)); ...
constraintJacobianSwingFootRollingDot(3,9) = 0; ...
constraintJacobianSwingFootRollingDot(3,10) = 0; 
constraintJacobianSwingFootRollingDot(4,1) = 0; ...
constraintJacobianSwingFootRollingDot(4,2) = 0; ...
constraintJacobianSwingFootRollingDot(4,3) = 0; ...
constraintJacobianSwingFootRollingDot(4,4) = (c4*u4*(pelvisWidth + 2*s8*(-1 + ...
R)))/2. + c7*c8*s4*u4*(-1 + R) + c4*c8*s7*u7*(-1 + R) + c8*s4*u8*(-1 + R) + ...
c4*c7*s8*u8*(-1 + R); constraintJacobianSwingFootRollingDot(4,5) = 0; ...
constraintJacobianSwingFootRollingDot(4,6) = 0; ...
constraintJacobianSwingFootRollingDot(4,7) = c4*c8*s7*u4*(-1 + R) + ...
c7*c8*s4*u7*(-1 + R) - s4*s7*s8*u8*(-1 + R); ...
constraintJacobianSwingFootRollingDot(4,8) = -((-(c8*s4*u4) - c4*c7*s8*u4 + ...
s4*s7*s8*u7 - c7*c8*s4*u8 - c4*s8*u8)*(-1 + R)); ...
constraintJacobianSwingFootRollingDot(4,9) = 0; ...
constraintJacobianSwingFootRollingDot(4,10) = 0; 

          
          
          C = constraintJacobianSwingFootRolling;
          CDot = constraintJacobianSwingFootRollingDot;
          
        case 'stanceFootRolling'
          
          constraintJacobianStanceFootRolling(4, 9) = 0;
          constraintJacobianStanceFootRollingDot(4, 9) = 0;
          
          
          
constraintJacobianStanceFootRolling(1,1) = 1; ...
constraintJacobianStanceFootRolling(1,2) = 0; ...
constraintJacobianStanceFootRolling(1,3) = 0; ...
constraintJacobianStanceFootRolling(1,4) = 0; ...
constraintJacobianStanceFootRolling(1,5) = c5*c6*(-1 + R) - c4*R; ...
constraintJacobianStanceFootRolling(1,6) = s5*(-(s6*(-1 + R)) - s4*R); ...
constraintJacobianStanceFootRolling(1,7) = 0; ...
constraintJacobianStanceFootRolling(1,8) = 0; ...
constraintJacobianStanceFootRolling(1,9) = 0; 
constraintJacobianStanceFootRolling(2,1) = 0; ...
constraintJacobianStanceFootRolling(2,2) = 1; ...
constraintJacobianStanceFootRolling(2,3) = 0; ...
constraintJacobianStanceFootRolling(2,4) = -(s4*(pelvisWidth - 2*s6*(-1 + ...
R)))/2. - c4*c5*c6*(-1 + R) + R; constraintJacobianStanceFootRolling(2,5) = ...
c6*s4*s5*(-1 + R); constraintJacobianStanceFootRolling(2,6) = -(c4*c6*(-1 + ...
R)) + c5*(s4*s6*(-1 + R) + R); constraintJacobianStanceFootRolling(2,7) = 0; ...
constraintJacobianStanceFootRolling(2,8) = 0; ...
constraintJacobianStanceFootRolling(2,9) = 0; 
constraintJacobianStanceFootRolling(3,1) = 0; ...
constraintJacobianStanceFootRolling(3,2) = 0; ...
constraintJacobianStanceFootRolling(3,3) = 1; ...
constraintJacobianStanceFootRolling(3,4) = (c4*(pelvisWidth - 2*s6*(-1 + ...
R)))/2. - c5*c6*s4*(-1 + R); constraintJacobianStanceFootRolling(3,5) = ...
-(c4*c6*s5*(-1 + R)); constraintJacobianStanceFootRolling(3,6) = -((c6*s4 + ...
c4*c5*s6)*(-1 + R)); constraintJacobianStanceFootRolling(3,7) = 0; ...
constraintJacobianStanceFootRolling(3,8) = 0; ...
constraintJacobianStanceFootRolling(3,9) = 0; 
constraintJacobianStanceFootRolling(4,1) = 0; ...
constraintJacobianStanceFootRolling(4,2) = 1; ...
constraintJacobianStanceFootRolling(4,3) = 0; ...
constraintJacobianStanceFootRolling(4,4) = -(s4*(pelvisWidth - 2*s6*(-1 + ...
R)))/2. - c4*c5*c6*(-1 + R); constraintJacobianStanceFootRolling(4,5) = ...
c6*s4*s5*(-1 + R); constraintJacobianStanceFootRolling(4,6) = -((c4*c6 - ...
c5*s4*s6)*(-1 + R)); constraintJacobianStanceFootRolling(4,7) = 0; ...
constraintJacobianStanceFootRolling(4,8) = 0; ...
constraintJacobianStanceFootRolling(4,9) = 0; 


constraintJacobianStanceFootRollingDot(1,1) = 0; ...
constraintJacobianStanceFootRollingDot(1,2) = 0; ...
constraintJacobianStanceFootRollingDot(1,3) = 0; ...
constraintJacobianStanceFootRollingDot(1,4) = 0; ...
constraintJacobianStanceFootRollingDot(1,5) = -(c6*s5*u5*(-1 + R)) - ...
c5*s6*u6*(-1 + R) + s4*u4*R; constraintJacobianStanceFootRollingDot(1,6) = ...
c5*u5*(-(s6*(-1 + R)) - s4*R) + s5*(-(c6*u6*(-1 + R)) - c4*u4*R); ...
constraintJacobianStanceFootRollingDot(1,7) = 0; ...
constraintJacobianStanceFootRollingDot(1,8) = 0; ...
constraintJacobianStanceFootRollingDot(1,9) = 0; 
constraintJacobianStanceFootRollingDot(2,1) = 0; ...
constraintJacobianStanceFootRollingDot(2,2) = 0; ...
constraintJacobianStanceFootRollingDot(2,3) = 0; ...
constraintJacobianStanceFootRollingDot(2,4) = -(c4*u4*(pelvisWidth - 2*s6*(-1 ...
+ R)))/2. + c5*c6*s4*u4*(-1 + R) + c4*c6*s5*u5*(-1 + R) + c6*s4*u6*(-1 + R) + ...
c4*c5*s6*u6*(-1 + R); constraintJacobianStanceFootRollingDot(2,5) = ...
c4*c6*s5*u4*(-1 + R) + c5*c6*s4*u5*(-1 + R) - s4*s5*s6*u6*(-1 + R); ...
constraintJacobianStanceFootRollingDot(2,6) = c5*(c4*s6*u4*(-1 + R) + ...
c6*s4*u6*(-1 + R)) + c6*s4*u4*(-1 + R) + c4*s6*u6*(-1 + R) - s5*u5*(s4*s6*(-1 ...
+ R) + R); constraintJacobianStanceFootRollingDot(2,7) = 0; ...
constraintJacobianStanceFootRollingDot(2,8) = 0; ...
constraintJacobianStanceFootRollingDot(2,9) = 0; 
constraintJacobianStanceFootRollingDot(3,1) = 0; ...
constraintJacobianStanceFootRollingDot(3,2) = 0; ...
constraintJacobianStanceFootRollingDot(3,3) = 0; ...
constraintJacobianStanceFootRollingDot(3,4) = -(s4*u4*(pelvisWidth - 2*s6*(-1 ...
+ R)))/2. - c4*c5*c6*u4*(-1 + R) + c6*s4*s5*u5*(-1 + R) - c4*c6*u6*(-1 + R) + ...
c5*s4*s6*u6*(-1 + R); constraintJacobianStanceFootRollingDot(3,5) = ...
c6*s4*s5*u4*(-1 + R) - c4*c5*c6*u5*(-1 + R) + c4*s5*s6*u6*(-1 + R); ...
constraintJacobianStanceFootRollingDot(3,6) = -((c4*c6*u4 - c5*s4*s6*u4 - ...
c4*s5*s6*u5 + c4*c5*c6*u6 - s4*s6*u6)*(-1 + R)); ...
constraintJacobianStanceFootRollingDot(3,7) = 0; ...
constraintJacobianStanceFootRollingDot(3,8) = 0; ...
constraintJacobianStanceFootRollingDot(3,9) = 0; 
constraintJacobianStanceFootRollingDot(4,1) = 0; ...
constraintJacobianStanceFootRollingDot(4,2) = 0; ...
constraintJacobianStanceFootRollingDot(4,3) = 0; ...
constraintJacobianStanceFootRollingDot(4,4) = -(c4*u4*(pelvisWidth - 2*s6*(-1 ...
+ R)))/2. + c5*c6*s4*u4*(-1 + R) + c4*c6*s5*u5*(-1 + R) + c6*s4*u6*(-1 + R) + ...
c4*c5*s6*u6*(-1 + R); constraintJacobianStanceFootRollingDot(4,5) = ...
c4*c6*s5*u4*(-1 + R) + c5*c6*s4*u5*(-1 + R) - s4*s5*s6*u6*(-1 + R); ...
constraintJacobianStanceFootRollingDot(4,6) = -((-(c6*s4*u4) - c4*c5*s6*u4 + ...
s4*s5*s6*u5 - c5*c6*s4*u6 - c4*s6*u6)*(-1 + R)); ...
constraintJacobianStanceFootRollingDot(4,7) = 0; ...
constraintJacobianStanceFootRollingDot(4,8) = 0; ...
constraintJacobianStanceFootRollingDot(4,9) = 0; 


          
          
          C = constraintJacobianStanceFootRolling;
          CDot = constraintJacobianStanceFootRollingDot;
          
        otherwise
          error('unknown mode for walker: %s', mode);
      end
      
    end
    
    function [energies] = getEnergyOfState(this, state)
      %%
      %       state = this.getWalkerStateObjectFromVector(state);
      %       state.setQsUsAndTrigInCurrentFunction();
      
      if (isnumeric(state))
        ThreeDWalkerSplayTorsoState.setQsUsAndTrigInCurrentFunctionFromState(state);
      else
        state.setQsUsAndTrigInCurrentFunction();
      end
      this.setWalkerParamsInCurrentFunction();
      
      

energies.PE = (KSwing*((-q5 + q7)*(-q5 + q7)))/2. + g*(-((c4*c7*c8 - ...
s4*s8)*legMassVerticalOffset*MLeg*cos(groundAngle)) + q3*(2*MLeg + MPelvis + ...
MTorso)*cos(groundAngle) + (-(c4*c5*c6*legMassVerticalOffset*MLeg) + ...
s4*s6*legMassVerticalOffset*MLeg + c4p9*MTorso*torsoHeight)*cos(groundAngle) ...
+ c6*s5*legMassVerticalOffset*MLeg*sin(groundAngle) + ...
c8*s7*legMassVerticalOffset*MLeg*sin(groundAngle) - q1*(2*MLeg + MPelvis + ...
MTorso)*sin(groundAngle));

energies.PEGravity = g*(-((c4*c7*c8 - ...
s4*s8)*legMassVerticalOffset*MLeg*cos(groundAngle)) + q3*(2*MLeg + MPelvis + ...
MTorso)*cos(groundAngle) + (-(c4*c5*c6*legMassVerticalOffset*MLeg) + ...
s4*s6*legMassVerticalOffset*MLeg + c4p9*MTorso*torsoHeight)*cos(groundAngle) ...
+ c6*s5*legMassVerticalOffset*MLeg*sin(groundAngle) + ...
c8*s7*legMassVerticalOffset*MLeg*sin(groundAngle) - q1*(2*MLeg + MPelvis + ...
MTorso)*sin(groundAngle));

energies.PESpring = (KSwing*((-q5 + q7)*(-q5 + q7)))/2.;

energies.KE = (MPelvis*(u1*u1 + u2*u2 + u3*u3))/2. + ...
(MLeg*(-2*c5*u1*(s5*s6*u4 + c6*u5)*legMassVerticalOffset - ...
2*s4*s5*u2*(s5*s6*u4 + c6*u5)*legMassVerticalOffset + 2*s5*s6*u1*(c5*u4 + ...
u6)*legMassVerticalOffset + 2*(c4*c6 - c5*s4*s6)*u2*(c5*u4 + ...
u6)*legMassVerticalOffset + 2*(c6*s4 + c4*c5*s6)*u3*(c5*u4 + ...
u6)*legMassVerticalOffset - s4*u2*u4*pelvisWidth + s5*u4*(s5*s6*u4 + ...
c6*u5)*legMassVerticalOffset*pelvisWidth + c5*s6*u4*(c5*u4 + ...
u6)*legMassVerticalOffset*pelvisWidth + ...
c4*u3*(2*c6*s5*u5*legMassVerticalOffset + u4*(pelvisWidth + ...
2*s6*legMassVerticalOffset*(s5*s5))) + u1*u1 + u2*u2 + u3*u3 + (s5*s6*u4 + ...
c6*u5)*(s5*s6*u4 + c6*u5)*(legMassVerticalOffset*legMassVerticalOffset) + ...
(c5*u4 + u6)*(c5*u4 + u6)*(legMassVerticalOffset*legMassVerticalOffset) + ...
(u4*u4*(pelvisWidth*pelvisWidth))/4.))/2. + (MLeg*(-2*c7*u1*(s7*s8*u4 + ...
c8*u7)*legMassVerticalOffset - 2*s4*s7*u2*(s7*s8*u4 + ...
c8*u7)*legMassVerticalOffset + 2*s7*s8*u1*(c7*u4 + u8)*legMassVerticalOffset ...
+ 2*(c4*c8 - c7*s4*s8)*u2*(c7*u4 + u8)*legMassVerticalOffset + 2*(c8*s4 + ...
c4*c7*s8)*u3*(c7*u4 + u8)*legMassVerticalOffset + s4*u2*u4*pelvisWidth - ...
s7*u4*(s7*s8*u4 + c8*u7)*legMassVerticalOffset*pelvisWidth - c7*s8*u4*(c7*u4 ...
+ u8)*legMassVerticalOffset*pelvisWidth + c4*u3*(2*s7*(s7*s8*u4 + ...
c8*u7)*legMassVerticalOffset - u4*pelvisWidth) + u1*u1 + u2*u2 + u3*u3 + ...
(s7*s8*u4 + c8*u7)*(s7*s8*u4 + ...
c8*u7)*(legMassVerticalOffset*legMassVerticalOffset) + (c7*u4 + u8)*(c7*u4 + ...
u8)*(legMassVerticalOffset*legMassVerticalOffset) + ...
(u4*u4*(pelvisWidth*pelvisWidth))/4.))/2. + (MTorso*(-2*c4p9*u2*(u4 + ...
u9)*torsoHeight - 2*s4p9*u3*(u4 + u9)*torsoHeight + u1*u1 + u2*u2 + u3*u3 + ...
(u4 + u9)*(u4 + u9)*(torsoHeight*torsoHeight)))/2. + ((IPelvis + ITorso + ...
ILeg*(c5*c5) + ILeg*(c7*c7) + ILegSmall*(c6*c6)*(s5*s5) + ...
ILeg*(s5*s5)*(s6*s6) + ILegSmall*(c8*c8)*(s7*s7) + ...
ILeg*(s7*s7)*(s8*s8))*(u4*u4) + (ILeg*(c6*c6) + ILegSmall*(s6*s6))*(u5*u5) + ...
ILeg*(u6*u6) + ILeg*(c8*c8)*(u7*u7) + ILegSmall*(s8*s8)*(u7*u7) + ...
ILeg*(u8*u8) + ITorso*(u9*u9) + u4*(2*c5*u6*ILeg + 2*c7*u8*ILeg + 2*u9*ITorso ...
+ s5*u5*(ILeg - ILegSmall)*sin(2*q6) + s7*u7*ILeg*sin(2*q8) - ...
s7*u7*ILegSmall*sin(2*q8)))/2.;
      
      
      energies.total = energies.KE + energies.PE;
    end
    
  end
  
  
end

